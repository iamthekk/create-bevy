import style from "@isentinel/eslint-config";

import prettier from "eslint-plugin-prettier";

export default style(
	{
		perfectionist: {
			customClassGroups: [
				"onInit",
				"onStart",
				"onPlayerJoin",
				"onPlayerLeave",
				"onRender",
				"onPhysics",
				"onTick",
			],
		},
		plugins: {
			prettier,
		},
		pnpm: true,
		react: true,
		rules: {
			"@cspell/spellchecker": "off",
			"@typescript-eslint/no-explicit-any": "off",
			"antfu/consistent-list-newline": "off",
			"antfu/top-level-function": "off",
			"better-max-params/better-max-params": "off",
			"format/prettier": "off",
			"id-length": "off",
			"import/no-namespace": "off",
			"jsdoc/check-param-names": "off",
			"jsdoc/convert-to-jsdoc-comments": "off",
			"jsdoc/informative-docs": "off",
			"unicorn/no-useless-undefined": "off",
			"jsdoc/require-description-complete-sentence": "off",
			"jsdoc/require-param": "off",
			"jsdoc/require-returns-check": "off",
			"linebreak-style": "off",
			"max-classes-per-file": "off",
			"max-depth": "off",
			"max-lines": "off",
			"max-lines-per-function": "off",
			"no-empty": "off",
			"no-inline-comments": "off",
			"no-lonely-if": "off",
			"no-restricted-syntax": "off",
			"no-self-compare": "off",
			"no-undef": "off",
			"no-useless-catch": "off",
			"perfectionist/sort-objects": [
				"error",
				{
					customGroups: {
						id: "^id$",
						name: "^name$",
						callbacks: ["\\b(on[A-Z][a-zA-Z]*)\\b"],
					},
					groups: ["id", "name", "unknown"],
					order: "asc",
					partitionByComment: "^Part:\\*\\*(.*)$",
					type: "natural",
				},
			],
			"react-hooks-extra/no-unnecessary-use-memo": "off",
			"react-hooks-roblox/rules-of-hooks": "off",
			"react/prefer-read-only-props": "off",
			"roblox-ts/no-any": "off",
			"roblox/lua-truthiness": "off",
			"roblox/misleading-lua-tuple-checks": "off",
			"roblox/no-any": "off",
			"shopify/prefer-class-properties": "off",
			"shopify/prefer-early-return": "off",
			"shopify/prefer-module-scope-constants": "off",
			"shopify/react-hooks-strict-return": "off",
			"sonar/cognitive-complexity": "off",
			"sonar/destructuring-assignment-syntax": "off",
			"sonar/max-switch-cases": "off",
			"sonar/no-commented-code": "off",
			"sonar/no-dead-store": "off",
			"sonar/no-duplicate-string": "off",
			"sonar/no-identical-functions": "off",
			"sonar/no-nested-conditional": "off",
			"sonar/no-nested-incdec": "off",
			"sonar/no-useless-catch": "off",
			"sonar/use-type-alias": "off",
			"ts/array-type": "off",
			"ts/explicit-function-return-type": "off",
			"ts/explicit-member-accessibility": "off",
			"ts/no-empty-function": "off",
			"ts/no-empty-object-type": "off",
			"ts/no-floating-promises": "off",
			"ts/no-non-null-assertion": "off",
			"ts/no-require-imports": "off",
			"ts/no-shadow": "off",
			"ts/no-this-alias": "off",
			"ts/no-unnecessary-condition": "off",
			"ts/no-unnecessary-type-assertion": "off",
			"ts/no-unnecessary-type-parameters": "off",
			"ts/no-unused-vars": "off",
			"ts/no-useless-constructor": "off",
			"ts/prefer-nullish-coalescing": "off",
			"ts/prefer-optional-chain": "off",
			"ts/strict-boolean-expressions": "off",
			"unicorn/consistent-destructuring": "off",
			"unicorn/no-array-for-each": "off",
			"unicorn/no-keyword-prefix": "off",
			"unicorn/prefer-default-parameters": "off",
			"unicorn/prefer-ternary": "off",
			"unicorn/prevent-abbreviations": "off",
			"unused-imports/no-unused-imports": "off",
			"unused-imports/no-unused-vars": "off",
		},
		type: "game",
	},
	{
		ignores: [
			// Documentation and structured text
			"**/*.md",
			"**/*.d.ts",
			"**/*.js",
			"**/*.mjs",
			"**/*.json",

			// Configuration formats we lint elsewhere
			"**/*.yaml",
			"**/*.yml",
			"**/*.toml",

			// Static assets
			"assets/**/*.*",
			"asset/**/*.*",

			// Generated outputs
			"dist/",
			"build/",
			"out/",

			// Dependencies and transient files
			"node_modules/",

			// Roblox specific artefacts
			"**/*.lua",
			"**/*.luau",
			"**/*.spec.ts",
			"configs/**/*",
			"**/configs/**/*",
		],
	},
	{
		files: ["**/commands/**/*"],
		rules: {
			"unicorn/filename-case": "off",
		},
	},
);
